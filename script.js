
/**
 * Fucntion that creates a single task item
 * @param {Object} task An object that takes three properties
 * @param {string} task.id - Generated by firebase - Not needed.
 * @param {string} task.description - Description of a task.
 * @param {boolean} task.done - Bool that determines wether the task has been completed.
 */
const createTaskItem = (task) => {
    //create containing div
    const div = document.createElement('div');
    div.classList.add('task-item');
    div.setAttribute('id', task.id);

    //create checkbox
    const checkbox = document.createElement('input');
    checkbox.type = "checkbox";
    checkbox.classList.add('checkbox-done');
    div.appendChild(checkbox);
    
    //create description
    const p = document.createElement('p');
    p.classList.add('task-description');
    const taskdescription = document.createTextNode(task.description);
    p.appendChild(taskdescription);
    div.appendChild(p);
    if(task.done) {
        checkbox.checked = true;
        p.classList.add('strikethrough');
    }

    //create delete button
    const deleteButton = document.createElement('button');
    deleteButton.classList.add('delete-button');
    div.appendChild(deleteButton);
    return div;
}

const taskContainer = document.querySelector('main');
taskContainer.addEventListener('click', () => {handleDynamicListener(event)});
/**
 * Function that adds all tasks that where recieved from the database into the dom by using the createTaskItem function
 */
const addTasksToDom = async () => {
    const tasks = await convertResponse();
    const taskItems = tasks.map(item => {
        const taskItem = createTaskItem(item);
        return taskItem;
    });
    taskItems.forEach(item => {
        taskContainer.appendChild(item);
    });
}

/**
 * Function that converts the object with hashes into an array with tasks.
 */
const convertResponse = async () => {
    const result = await getAllTasks();
    let tasks = Object.keys(result).map(key => ({
        id: key,
        description: result[key].description,
        done: result[key].done
    }));
    //console.log("After the tasks array", tasks);
    return tasks;
}

/**
 * Function that handles all input from the navbar to add new tasks
 */
const handleNavInput = async () => {
    const taskDescription = navTextInput.value;
    const task = {description: taskDescription, done: false};
    const post = await postTask(task);
    const json = await post.json();
    task.id = json.name;
    const taskItem = createTaskItem(task);
    taskContainer.appendChild(taskItem);
}

/**
 * Function that handles all delegated eventlisteners. Handles delete button event, checkbox clicks and description changes.
 */
const handleDynamicListener = async (event) => {
    if(event.target.matches('.delete-button')){
        const hash = event.target.closest('.task-item').id;
        await deleteTask(hash);
        event.target.closest('.task-item').remove();
    }
    else if(event.target.matches('.checkbox-done')){
        const hash = event.target.closest('.task-item').id;
        const description = event.target.closest('.task-item').children[1].textContent;
        const done = event.target.closest('.checkbox-done').checked ? true : false;
        if(done)
        {
            event.target.closest('.task-item').children[1].classList.add('strikethrough');
        }
        else {
            event.target.closest('.task-item').children[1].classList.remove('strikethrough');
        }
        const newTask = {description: description, done: done};
        await putTask(hash, newTask);        
    }
    else if(event.target.matches('.task-description')){
        //create input and set value to match current content
        const newInput = document.createElement('input');
        newInput.type = "text";
        newInput.classList.add('edit-description');
        newInput.value = event.target.textContent;
        event.target.closest('.task-item').replaceChild(newInput, event.target);
        //add save button
        const button = document.createElement('button');
        button.classList.add('save-button');
        const text = document.createTextNode('Save');
        button.appendChild(text);
        newInput.parentNode.insertBefore(button, newInput.nextSibling);
        //set focus to input
        newInput.focus();
    }
    else if(event.target.matches('.save-button')){
        //create elements
        const p = document.createElement('p');
        const textInput = event.target.closest('.task-item').children[1];
        p.classList.add('task-description');

        //update database
        const description = document.createTextNode(textInput.value);
        const hash = event.target.closest('.task-item').id;
        const done = textInput.closest('.task-item').children[0].checked ? true : false;
        const updatedTask = {description: description.textContent, done: done};
        const x = await putTask(hash, updatedTask);

        //update user interface
        p.appendChild(description);
        event.target.closest('.task-item').replaceChild(p, textInput);
        event.target.remove();
    }
}

const navTextInput = document.querySelector('nav input');
const addButton = document.getElementById('add-button');
addButton.addEventListener('click', handleNavInput)

addTasksToDom();